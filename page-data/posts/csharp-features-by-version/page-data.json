{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/csharp-features-by-version/","result":{"data":{"markdownRemark":{"id":"897e4765-9c25-56a8-b251-c785447e3a54","html":"<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C# 1</td>\n<td>Classes<br>Structs<br>Interfaces<br>Events<br>Properties<br>Delegates<br>Expressions<br>Statements<br>Attributes</td>\n</tr>\n<tr>\n<td>C# 2</td>\n<td>Generics<br>Nullable value types<br>Method group conversions<br>Anonymous methods<br>Delegate covariance and contravariance<br>Iterators (<code class=\"language-text\">yield return</code>)<br>Partial types<br>Static classes<br>Separate getter/setter access on properties<br>Namespace alias qualifier <code class=\"language-text\">::</code> syntax<br>The <code class=\"language-text\">global</code> **namespace alias<br>Extern aliases<br>Fixed-size buffers<br><code class=\"language-text\">InternalsVisibleToAttribute</code> support</td>\n</tr>\n<tr>\n<td>C# 3</td>\n<td>Partial methods<br>Automatically implemented properties<br>Implicitly typed local variables (<code class=\"language-text\">var</code>)<br>Implicitly typed arrays (<code class=\"language-text\">new[]</code>)<br>Object initializers<br>Collection initializers<br>Anonymous types<br>Lambda expressions (delegates)<br>Lambda expressions (expression trees)<br>Extension methods<br>Query expressions</td>\n</tr>\n<tr>\n<td>C# 4</td>\n<td>Dynamic typing<br>Optional parameters<br>Named arguments<br>Linked primary interop assemblies<br>Special rules for optional parameters in COM<br>Access to named indexers (COM only)<br>Generic variance for interfaces and delegates<br>Implementation change to lock statements<br>Implementation changes to field-like events<br>Field-like event access within the declaring class</td>\n</tr>\n<tr>\n<td>C# 5</td>\n<td><code class=\"language-text\">async</code> / <code class=\"language-text\">await</code><br>Changes to <code class=\"language-text\">foreach</code> iteration variable capture<br>Caller information attributes</td>\n</tr>\n<tr>\n<td>C# 6</td>\n<td>Read-only automatically implemented properties<br>Initializers for automatically implemented properties<br>Remove requirement to call <code class=\"language-text\">this()</code> in constructors for structs containing automatically implemented properties<br>Expression-bodied members<br>Interpolated string literals<br>The <code class=\"language-text\">nameof</code> operator<br>The <code class=\"language-text\">using static</code> directive<br>Object initializers using indexers<br>Collection initializers using extension Add methods<br>The null conditional <code class=\"language-text\">?.</code> operator<br>Exception filters<br>Removed restrictions on awaiting in <code class=\"language-text\">try/catch</code>, <code class=\"language-text\">try/finally</code>, and <code class=\"language-text\">try/catch</code> statements</td>\n</tr>\n<tr>\n<td>C# 7.0</td>\n<td>Tuples<br>Deconstruction via <code class=\"language-text\">Deconstruct</code> methods<br>Initial patterns: constant patterns, type patterns, <code class=\"language-text\">var</code> **patterns<br>Use of patterns with the <code class=\"language-text\">is</code> **operator<br>Use of patterns in switch statements, including guard clauses (<code class=\"language-text\">when</code>)<br>Ref locals<br>Ref return<br>Binary integer literals<br>Underscore separators in numeric literals<br>Returning custom task types from async methods<br>More kinds of expression-bodied members</td>\n</tr>\n<tr>\n<td>C# 7.1</td>\n<td>The <code class=\"language-text\">default</code> **literal<br>Improvements to type patterns matching against generic values<br>Async entry points (<code class=\"language-text\">async Task Main</code>)<br>Inferred tuple element names</td>\n</tr>\n<tr>\n<td>C# 7.2</td>\n<td>Allow the conditional <code class=\"language-text\">?:</code> operator to work with <em>ref</em><br><code class=\"language-text\">ref readonly</code> locals and return types<br><code class=\"language-text\">in</code> parameters<br>Read-only structs<br>Extension methods with <em>ref/in</em> parameters<br>Ref-like structs<br><code class=\"language-text\">stackalloc</code>  support for <code class=\"language-text\">Span&lt;T&gt;</code><br>Nontrailing named arguments<br>The <code class=\"language-text\">private protected</code> access modifier<br>Underscore separators in numeric literals directly after the <code class=\"language-text\">0x</code> or <code class=\"language-text\">0b</code> base specifier</td>\n</tr>\n<tr>\n<td>C# 7.3</td>\n<td>Access to fixed-sized buffers via fields without <em>fixed</em> statements<br><code class=\"language-text\">*==*</code> and <code class=\"language-text\">!=</code> operators for tuples<br>Use of pattern and <code class=\"language-text\">out</code> variables in field, property, and constructor initializers<br>Reassignment of ref locals<br>Initializers in <code class=\"language-text\">stackalloc</code> statements<br>Pattern-based fixed statements using <code class=\"language-text\">GetPinnableReference</code><br>Generic type constraints now permitted on <code class=\"language-text\">Enum</code> and <code class=\"language-text\">Delegate</code><br>New generic type constraint of <code class=\"language-text\">unmanaged</code><br>Placement of attributes of fields backing automatically implemented properties</td>\n</tr>\n<tr>\n<td>C# 8.0</td>\n<td>Readonly members<br>Default interface methods<br>Pattern matching enhancements: Switch expressions, Property patterns, Tuple patterns Positional patterns<br>Using declarations<br>Static local functions<br>Disposable ref structs<br>Nullable reference types<br>Asynchronous streams<br>Indices and ranges<br>Null-coalescing assignment<br>Unmanaged constructed types<br><code class=\"language-text\">stackalloc</code> in nested expressions<br>Enhancement of interpolated verbatim string</td>\n</tr>\n<tr>\n<td>C# 9.0<br>(preview)</td>\n<td>Init-only properties<br>- Init accessors and readonly fields<br>Records (<code class=\"language-text\">data class</code>)<br>- With-expressions<br>- Value-based equality<br>- Data members<br>- Positional records<br>- With-expressions and inheritance<br>- Value-based equality and inheritance<br>Top-level programs (omitting <code class=\"language-text\">Main</code> method)<br>Improved pattern matching<br>- Simple type patterns<br>- Relational patterns<br>- Logical patterns<br>- Target-typed <code class=\"language-text\">new</code> expressions<br>- Target typed <code class=\"language-text\">??</code> and <code class=\"language-text\">?:</code><br>Covariant returns</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h1>\n<ul>\n<li>C# in Depth 4 ed</li>\n<li>The history of C# <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history\">https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history</a></li>\n<li>Welcome to C# 9.0 <a href=\"https://devblogs.microsoft.com/dotnet/welcome-to-c-9-0/\">https://devblogs.microsoft.com/dotnet/welcome-to-c-9-0/</a></li>\n<li>dotnet/csharplang Milestone: 9.0 candidate <a href=\"https://github.com/dotnet/csharplang/milestone/15\">https://github.com/dotnet/csharplang/milestone/15</a></li>\n</ul>","fields":{"slug":"/posts/csharp-features-by-version/","tagSlugs":["/tag/tech/","/tag/c/"]},"frontmatter":{"date":"2020-06-10T19:45:00+09","description":"C# 언어 버전별 기능 목록.","tags":["Tech","C#"],"title":"C# 버전별 언어 기능"}}},"pageContext":{"slug":"/posts/csharp-features-by-version/"}}}