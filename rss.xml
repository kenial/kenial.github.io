<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[blog.kenial.net]]></title><description><![CDATA[GhostOnNetwork]]></description><link>https://blog.kenial.net</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 30 May 2020 09:41:51 GMT</lastBuildDate><item><title><![CDATA[블로그 소스 저장소를 합치다]]></title><description><![CDATA[SSG + GitHub Pages로 운영하던 블로그의 GitHub 저장소를 소스 코드, 빌드 결과물 용으로 두 개를 따로 써 오다가 하나로 합친 이야기.]]></description><link>https://blog.kenial.net/posts/migrate-gitgub-repo-for-blog/</link><guid isPermaLink="false">https://blog.kenial.net/posts/migrate-gitgub-repo-for-blog/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;p&gt;이 블로그는 현재 GitHub Pages 기능을 사용하고 있다. 그 말인즉슨, 정적 리소스 형태로 빌드된 웹 사이트 소스가 GitHub 저장소에 저장되어 있고 GitHub Pages는 단순히 서버에 저장된 정적 리소스에 대한 요청이 들어오면 반환하는 웹 서버 역할만 하고 있고 서버에서 실행되는 코드는 하나도 없다는 것. GitHub Pages에는 커스텀 도메인을 설정할 수 있기 때문에, 도메인 주소만 갖고 있다면 별도의 비용 없이 블로그를 운영할 수 있다. 여기까지는 좋다.&lt;/p&gt;
&lt;p&gt;여튼 처음 블로그를 만들 때에는 루비 기반의 Jekyll을 별로 사용하고 싶지 않아서 다른 Static Site Generator (이하 SSG)를 찾아보았고, 결국 node 기반의 Gatsby를 사용했다. GitHub Pages는 Jekyll만 빌드 작업을 지원하는데, Jekyll을 사용하지 않을 경우 유저가 정적 웹 사이트 리소스를 직접 GitHub 저장소에 푸시해야 한다.&lt;/p&gt;
&lt;p&gt;이 경우 저장소 관리가 뭔가 약간 이상해지는데, 블로그 사이트의 소스 코드(설마 블로그를 만들고 소스 코드를 그냥 버리는 유저는 없을테니)와 빌드 결과물을 모두 저장소에 푸시해야 하기 때문이다. 몇 가지 옵션이 있기는 한데&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;master 브랜치에 빌드 결과물을 푸시하거나&lt;/li&gt;
&lt;li&gt;master 브랜치의 /docs 경로에 빌드 결과물을 푸시하거나&lt;/li&gt;
&lt;li&gt;gh-pages 브랜치에 빌드 결과물을 푸시해야 한다. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;GitHub 입장에서는 사용자에게 굳이 다양한 옵션을 줄 필요가 없어서 이렇게 했겠지만, 일반적인 GitHub 사용법에 익숙한 나같은 입장에서는 &lt;em&gt;브랜치마다 아예 다른 내용을 푸시해서 관리해야 한다&lt;/em&gt;는 개념이 도저히 납득이 안 되어서 (이해가 안 간다기보다는 그냥 뭔가 잘못된 것 같다는 느낌을 받았다) 그동안 블로그의 소스 코드를 위한 저장소와 빌드 결과물을 저장하기 위한 저장소를 별도로 만들어서 관리를 해 왔다.&lt;/p&gt;
&lt;p&gt;하지만 실제로 글을 하나 쓰려면 불편한 것이, 소스 코드 저장소에서 Gatsby 개발 서버를 띄워 글을 작성하고 결과물을 확인한 다음 빌드를 돌리고, 빌드가 끝난 파일을 빌드 결과물 저장소에 복사한 다음, 두 저장소 각각 푸시를 해야 한다. 아니 이게 뭐야…&lt;/p&gt;
&lt;p&gt;보통은 npm run deploy 같은 커맨드를 만들어놓고 돌리니까 커맨드를 일일이 입력할 필요는 없지만 이것 또한 뭔가 잘못되었다는 느낌이 계속 들어 그 동안 미뤄오다가 오늘에야 저장소를 하나로 합침. 위에 있던 옵션 중 1번을 사용해서 소스 코드는 dev 브랜치에, 빌드 결과물은 master 브랜치에 저장하는 방식으로 해결.&lt;/p&gt;
&lt;p&gt;여튼 SSG를 사용하여 GitHub Pages에서 블로그를 돌리고 싶은 분이 또 계시다면,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;(루비가 맘에 안 들더라도) 웬만하면 Jekyll 쓰세요.&lt;/li&gt;
&lt;li&gt;그냥 브랜치 두 개 만들어서 소스/빌드 용도로 쓰세요.
(gh-pages 사용한 스크립트가 지천에 널려있으니 그냥 갖다 쓰면 됨)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그럼 여기까지.&lt;/p&gt;</content:encoded></item><item><title><![CDATA["기계는 어떻게 생각하는가?" 출간]]></title><description><![CDATA[벌써 한 달이 다 되어갑니다만, "How Smart Machines Think"의 번역서인 "기계는 어떻게 생각하는가?"가 최근 출간되었습니다. (네, 제가 역자입니다)]]></description><link>https://blog.kenial.net/posts/how-smart-machines-think/</link><guid isPermaLink="false">https://blog.kenial.net/posts/how-smart-machines-think/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;p&gt;벌써 한 달이 다 되어갑니다만, “How Smart Machines Think”의 번역서인 “기계는 어떻게 생각하는가?”가 최근 출간되었습니다. (네, 제가 역자입니다)&lt;/p&gt;
&lt;img src=&quot;/media/2020-01-21/book.png&quot; alt=&quot;기계는 어떻게 생각하는가 표지&quot; /&gt;
&lt;p&gt;역자 입장에서 보는 이 책의 포인트는 다음 두 가지입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AI / ML 분야의 자료는 차고 넘치지만, 어떤 기법이 주목을 받으며 어떤 문제를 해결해 왔는지를 조망해주는 책은 찾아보기 어려웠다. 최근 AI / ML의 발전 과정을 이해하기 위한 좋은 책.&lt;/li&gt;
&lt;li&gt;ML 연구에서 (그리고 다른 연구 분야도 마찬가지지만) 도전적인 과제와 다양한 시도를 장려하며 서로의 아이디어를 공유할 수 있는 연구 커뮤니티가 있어야 폭발적인 성장을 낳는다는 사례의 모음집. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;서점에서 절찬리에 판매중입니다. 이북 포맷도 제공되고 있으니 많이들 이용해 주세요 (_ _)&lt;/p&gt;
&lt;p&gt;혹시 오탈자 등을 발견하시면 &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1jycHau9mMs5kUrCQF9fXFU8LznfL986JV_90EBDsze8/edit#gid=0&quot; target=&quot;_blank&quot;&gt;구글 시트&lt;/a&gt;에 코멘트를 남겨주세요. 다음 인쇄시에 반영하도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;감사합니다!&lt;/p&gt;
&lt;h3 id=&quot;출판사-서적-링크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B6%9C%ED%8C%90%EC%82%AC-%EC%84%9C%EC%A0%81-%EB%A7%81%ED%81%AC&quot; aria-label=&quot;출판사 서적 링크 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;출판사 서적 링크&lt;/h3&gt;
&lt;p&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.easyspub.co.kr/20_Menu/BookView/340/PUB&quot;&gt;이지스 퍼블리싱 :: 도서 상세 - 기계는 어떻게 생각하는가?&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;온라인-서점-링크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%A8%EB%9D%BC%EC%9D%B8-%EC%84%9C%EC%A0%90-%EB%A7%81%ED%81%AC&quot; aria-label=&quot;온라인 서점 링크 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;온라인 서점 링크:&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;&lt;!-- --&gt;&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;&lt;!-- --&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;온라인 서점&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;Ebook 서점&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.yes24.com/Product/Goods/84937604?scode=032&amp;OzSrank=1&quot;&gt;&lt;img src=&quot;/media/2020-01-21/bookstore_y24.gif&quot; alt=&quot;Yes24&quot; width=&quot;150&quot;&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=221773962&quot;&gt;&lt;img src=&quot;/media/2020-01-21/bookstore_al.gif&quot; alt=&quot;&amp;#xC54C;&amp;#xB77C;&amp;#xB518;&quot; width=&quot;150&quot;&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9791163031253&amp;orderClick=LEa&amp;Kc=&quot;&gt;&lt;img src=&quot;/media/2020-01-21/bookstore_kb.gif&quot; alt=&quot;&amp;#xAD50;&amp;#xBCF4;&amp;#xBB38;&amp;#xACE0;&quot; width=&quot;150&quot;&gt;&lt;/a&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://shopping.interpark.com/product/productInfo.do?prdNo=6929975435&amp;dispNo=008001082&amp;pis1=shop&amp;pis2=product&quot;&gt;&lt;img src=&quot;/media/2020-01-21/bookstore_ip.gif&quot; alt=&quot;&amp;#xC778;&amp;#xD130;&amp;#xD30C;&amp;#xD06C;&quot; width=&quot;150&quot;&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://ridibooks.com/v2/Detail?id=754027775&quot;&gt;&lt;img src=&quot;/media/2020-01-21/bookstore_ridi.png&quot; alt=&quot;리디북스&quot; width=&quot;150&quot;&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content:encoded></item><item><title><![CDATA[수겸 ♡ 소령 결혼합니다]]></title><description><![CDATA[수겸 ♡ 소령 결혼합니다]]></description><link>https://blog.kenial.net/posts/wedding-invitation/</link><guid isPermaLink="false">https://blog.kenial.net/posts/wedding-invitation/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;div style=&quot;width:100%; max-width:600px;&quot;&gt;
&lt;img src=&quot;/media/2019-11-10/wedding-title1.png&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;/media/2019-11-10/wedding-title2.png&quot; /&gt;
&lt;hr /&gt;
&lt;div&gt;
&lt;a href=&quot;/media/2019-11-10/5x7_3.JPG&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2019-11-10/5x7_3.JPG&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/media/2019-11-10/5x7_1.JPG&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2019-11-10/5x7_1.JPG&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/media/2019-11-10/5x7_4.JPG&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2019-11-10/5x7_4.JPG&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;a href=&quot;/media/2019-11-10/30x20.JPG&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2019-11-10/30x20.JPG&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;/media/2019-11-10/7x5.JPG&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2019-11-10/7x5.JPG&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;!--
&lt;div&gt;
&lt;a href=&quot;/media/2019-11-10/5x7_1.JPG&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2019-11-10/5x7_1.JPG&quot; style=&quot;width:32.7%; display:inline;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/media/2019-11-10/5x7_3.JPG&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2019-11-10/5x7_3.JPG&quot; style=&quot;width:32.7%; display:inline; margin:0px 0.95% 0px 0.95%;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/media/2019-11-10/5x7_4.JPG&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2019-11-10/5x7_4.JPG&quot; style=&quot;width:32.7%; display:inline;&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;a href=&quot;/media/2019-11-10/30x20.JPG&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2019-11-10/30x20.JPG&quot; style=&quot;width:51.2%; display:inline; margin:0px 1% 0px 0px;&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;/media/2019-11-10/7x5.JPG&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2019-11-10/7x5.JPG&quot; style=&quot;width:47.8%; display:inline;&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
--&gt;
&lt;hr /&gt;
&lt;div&gt;&lt;a href=&quot;/media/2019-11-10/theconvention_map.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2019-11-10/theconvention_map.jpg&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[프로그래머스 인터뷰 회고 (?)]]></title><description><![CDATA[프로그래머스 인터뷰에 대한 회고를 빙자한 (...) 후속 포스트. 갑작스러운 요청으로, 마음의 준비도 없이, 미국에서의 인턴십에 관심이 있는 엔지니어를 대상으로 인터뷰를 하게 되어 뭘 어떻게 해야하나 고민하다가, 막상 인터뷰어 분을 만나봤더니 그냥 아무말이나 하셔도 된다고 하셔서 아무말을 하고 났더니 양심에 찔려서 스스로 보충할 겸, 회고할 겸, 인터뷰 편집본을 확인하면서 써 보는 글.]]></description><link>https://blog.kenial.net/posts/retro-on-programmers-interview/</link><guid isPermaLink="false">https://blog.kenial.net/posts/retro-on-programmers-interview/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;p&gt;갑작스러운 요청으로, 마음의 준비도 없이, 미국에서의 인턴십에 관심이 있는 엔지니어를 대상으로 인터뷰를 하게 되어 뭘 어떻게 해야하나 고민하다가, 막상 인터뷰어 분을 만나봤더니 그냥 아무말이나 하셔도 된다고 하셔서 아무말을 하고 났더니 양심에 찔려서 스스로 보충할 겸, 회고할 겸, 인터뷰 편집본을 확인하면서 써 보는 글.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;실제 인터뷰는 꽤 길었고 아무말대잔치성 발언도 꽤 많았는데, 그래서인지 편집을 했어도 이야기가 여기저기로 새는 느낌입니다. 더군다나, 스스로는 제일 중요하다고 생각하지 않았던 이야기 - 친구를 만듭시다 - 가 결론처럼 되어버려서 약간 의아하기도 하고요. 뭐 물론 중요하다고 생각하긴 하는데, 그건 사람마다 다르게 받아들일 문제니까요. (물론 인생 길게 가져가시는 분들은 당연히 친구 있으면 좋죠. 말할 것도 없지만) 전반적인 톤 자체가 아무말에 가까웠으므로 딱히 심각하게 받아들일 부분이 있었다고는 생각하지 않지만, 그냥 가볍게 봐 주시면 매우 감사하겠습니다.&lt;/p&gt;
&lt;p&gt;이야기 흐름에 크게 관계없는 디테일한 부분들(예를 들면, SI 시절에 했던 일들. 지금 생각하면 매니악한 것들도 많이 다뤘는데 인터뷰할 당시에는 기억이 안 떠올라서 생략;;)은 그냥 넘어가더라도, 사실관계가 다르거나 아예 평소 생각과 좀 다르게 말이 나온 것, 혹은 빼 먹은 이야기를 나열해 볼게요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“내가 어떤식으로든 세상에 영향을 미친다. 사람들한테 유용한 어떤것을 만들고 싶다.”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 부분에 대한 고민을 가끔 합니다. 최근 넷플릭스에서 Great Hack(한국어로는 “거대한 해킹”이란 타이틀이 붙었습니다)라는 다큐멘터리를 봤습니다. 많은 서비스가 사람들에게 유용한 서비스를 넘어서, 최대한 효율적으로 사람들의 시간을 뺏는 쪽으로 (나쁘게 말하면 중독시키는) 진화하고 있는데다, 심지어는 개인정보의 수집 창구 역할을 하기도 하죠. 사람들의 삶에 영향을 미치는 것을 넘어, 어떻게 좋은 영향을 미칠 것인가도 함께 고민해야 하는 부분이라 생각합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“그 때 이제 한국에 iPhone이 발매가 되죠.”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;한국에 아이폰 3GS가 발매된 것은 2009년 11월이었습니다. 저는 2009년 여름부터 아이팟 터치로 앱을 개발하고 있었어요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“근데 이걸 ASP.NET으로 하려니까 생산성이 높진 않았어요.”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그 당시(2010년;)라면 모를까 지금의 .NET Core는 그렇지 않아요. ASP.NET의 생산성에 대해 의심을 하고 계시다면 여러분 그것은 크나큰 오해입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“은퇴하기 직전까지 계속 새로운 기술을 공부하고, &lt;strong&gt;기존에 알고 있던 걸 버려가면서&lt;/strong&gt;, 계속 공부를 하고”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;제가 뱉은 말이지만 (…) 컴퓨터 공학에 있어서의 학습의 개념을 상당히 잘못 표현한 말입니다. 개인적으로, 컴퓨터 공학에는 (실제로 명확한 경계를 정의하기는 어렵지만) 기초의 영역과 응용의 영역이 있다고 생각합니다. 제가 생각하는 응용의 영역에 대한 기준은 “실세계의 문제를 해결하기 위한 것들”입니다. 그리고 대부분의 소프트웨어 엔지니어들이 하는 일이 이러한 응용의 영역에 있고요.&lt;/p&gt;
&lt;p&gt;소프트웨어 엔지니어는 문제를 해결하기 위해서 다양한 지식을 쌓습니다만, 응용의 영역에 있는 지식들은 때로는 자기들끼리 경쟁을 하거나, 서로를 대체하거나 하는 일들이 왕왕 일어납니다. 이유 또한 다양하죠. 성능, 편의성, 재사용성, 확장성, 보안, 생산성 … 시장에 서로 대립하는 기술이 있으면, 보통 어떤 한 기술이 압도적으로 우위를 갖지 않는 한 (심지어 압도적으로 우위에 있다고 하더라도) 나머지 기술이 시장에서 순식간에 사라지는 일은 잘 일어나지 않습니다. 기존 시스템의 유지보수가 이유가 될 수도 있고, 시장에서 당장 구할 수 있는 엔지니어의 수에 따라 기술이 결정될 수도 있으니까요. 이런 이유로, 응용의 영역에 존재하는 기술의 스펙트럼은 상당히 넓고, 이 스펙트럼을 따라서 새로운 지식을 계속해서 쌓아야 할 필요성 또한 높은 영역이 있고 적은 영역이 있습니다.&lt;/p&gt;
&lt;p&gt;하지만 좀 더 세부적으로 들어가면, 기술은 특정한 문제에 대한 해법이기도 합니다. 요즈음 각광받는 주제 중 하나인 머신 러닝을 예로 들 수 있을 것 같은데요, 신경망 모델링과 그동안 축적된 컴퓨터의 성능 개선은 데이터 분석을 아예 다른 영역으로 만들어 버렸습니다. 머신 러닝을 필요로 하는 데이터 프로젝트는 많지만, 이러한 머신 러닝을 활용하는 방법에 대해서 잘 알고 있는 소프트웨어 엔지니어는 시장에 많지 않고, 이는 데이터 사이언티스트의 몸값에 반영되고 있죠.&lt;/p&gt;
&lt;p&gt;좀 더 풀어서 말하면, 1. 특정한 문제를 해결할 수 있는 기술이 가끔 시장에 등장한다. 2. 초기에 이 기술을 습득한 사람은 많은 보상을 얻을 수 있다. 3. 이 기술을 습득해서 몸값을 높이려는 사람들이 늘어난다. 4. 시장이 점점 커진다. 5. 시장이 충분히 커지면 인력의 포화상태가 일어나 몸값이 떨어진다, 와 같은 과정이 시장에서는 끝없이 반복되고 있습니다. 그렇기 때문에 소프트웨어 엔지니어들이 시장에서 자신의 가치를 인정받으려면, 어느 정도의 학습 수준을 계속 유지해야 하는거죠.&lt;/p&gt;
&lt;p&gt;그렇다면 뭔가 새로운 기술이 쏟아져 나올 때마다 그걸 배우느라 자료를 뒤적거려야 하는 걸까요? 컴퓨터 과학을 전공한 사람이라면 알겠지만, 위에서 언급한 머신 러닝도 핵심 개념은 등장한지가 오래 되었습니다. 신경망의 경우, 수학적인 모델은 19세기 말엽에 등장했고, 디지털 컴퓨터에서의 모델은 1950년대에 제시되었죠. 20여년 전에 인공지능은 “뭔가 그럴 듯 하지만 속알맹이는 아무것도 없는 사기 같은” 무언가를 의미했지만, 오늘날의 인공지능은 그야말로 모든 산업 분야를 갈아엎고 있죠. 어떤 기술이 어떻게 위력을 발휘할지 예측하는 것은 쉽지 않은 일입니다.&lt;/p&gt;
&lt;p&gt;정리하자면, 소프트웨어 엔지니어에게 뭔가를 공부한다는 것은 투자에 가까운 행위입니다. 현재 시장에서 널리 쓰이는 기술과 아직은 널리 쓰이지 않지만 향후에 폭발할지도 모르는(?) 분야 사이에서 선택을 하는 과정이라고 할까요. 특정 분야를 깊게 탐구하는 엔지니어가 있고, 여러 분야를 넓게 탐구하는 엔지니어도 있습니다. 개인적인 흥미 때문에 분야를 선택하는 엔지니어가 있고, 시장 가치를 염두에 두고 분야를 선택하는 엔지니어도 있습니다. 이런 선택의 과정을 “기존에 알고 있던 것을 버리는” 과정이라고 말하긴 어려울 것 같습니다. (사실, 전문직이라 불리는 영역이라면 어떤 분야에서든 지식 습득의 양상은 비슷하리라 생각합니다) 겉보기에 컴퓨터 산업 분야의 변화 속도가 빨라 보일지는 몰라도, 그 산업을 유지하는 기본 원리는 그렇게 쉽게 변하지 않으니까요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“그러니까 내가 언제 잘릴지 모른다라는 막연한 스트레스도 존재할 수 있죠.”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;미국에는 at-will employment라는 고용 계약 유형이 있습니다. 주별로 예외 조항이 있긴 합니다만, 기본적인 개념은 “무슨 이유로든, 아무 때나 고용계약을 해지할 수 있는” 고용 계약입니다. 실리콘밸리의 IT 회사 대부분이 고용 계약서를 쓸 때 이 유형을 택합니다. 인터뷰 상에서는 “현실은 냉혹하다”라고 말하긴 했지만, 사실 회사 입장에서는 뚜렷한 이유가 없다면 해고 결정을 쉽게 내리지 않습니다. 다른 직원들의 사기, 직원을 새로 채용하고 적응시키는데 들어가는 비용, 이런 것들을 고려하면 신중하게 결정을 내릴 수 밖에 없죠.&lt;/p&gt;
&lt;p&gt;고용 형태의 차이가 문화의 차이를 만들어 내는 것 뿐이지, 냉혹하다는 표현은 좀 더 나간거 아닌가 싶습니다 ‘ ‘)&gt;&lt;/p&gt;
&lt;p&gt;※ 물론 짤려서 상자 들고 집에 가는 일이 벌어지면 … 기분은 더럽겠죠&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“별의별 주제에 대해서 다 밋업을 해요.”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 이야기를 하면서 Hacker Dojo (&lt;a href=&quot;https://hackerdojo.com&quot;&gt;https://hackerdojo.com&lt;/a&gt;)를 소개한다는 걸 깜빡했네요. 해커 도조는 일종의 커뮤니티 센터로, 실리콘 밸리에서 성공한 사람들이 기부를 해서 만든 장소입니다. 여기는 365일 무료로 개방되고, 특정한 공간을 점유해서 사용하고 싶으면 약간의 비용을 더 지불하는 형태로 운영됩니다. 탁구대라든가 뭐 이런저런 장난감도 굴러다니고, 커다란 대학 동아리방 같은 분위기에요.&lt;/p&gt;
&lt;p&gt;그러다보니 동네에서 온갖 사람들이 몰려들어 이상한 걸 만들고 있습니다. 뭔가 눈에 띄는게 있으면 가서 이건 뭐야 하고 말을 걸면 신나서 자기 작업에 대해 설명하는 사람도 흔히 볼 수 있어요. 밋업도 자주 열리는데, 어떤 테마를 정하고 정기적으로 강의가 열리기도 합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;그럼 여기까지. 다음 번에는 (기회가 있을런지 모르겠지만) 좀 더 정제된 내용으로 뵙겠습니다 (?)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Attach to IIS Process - Visual Studio Extension]]></title><description><![CDATA[A Visual Studio Extension, which makes finding an IIS process to attach easier by exposing Appication Pool name and binding information. / IIS 프로세스를 디버깅 할 때 Application Pool name과 binding 정보를 함께 보여주어 디버깅할 IIS 프로세스를 쉽게 찾을 수 있도록 해 주는 Visual Studio Extension.]]></description><link>https://blog.kenial.net/posts/attach-to-iis-process/</link><guid isPermaLink="false">https://blog.kenial.net/posts/attach-to-iis-process/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Visual Studio Marketplace link&lt;/em&gt; : &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=kenial.AttachToIISProcess&quot;&gt;kenial.AttachToIISProcess&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It provides a menu item “Attach to IIS Process…” in Tools menu, which makes easier to find an IIS process with AppPool name and binding information.&lt;/p&gt;
&lt;p&gt;IIS 프로세스를 디버깅할 때 타겟 프로세스를 쉽게 찾을 수 있게 해 주는 Visual Studio Extension입니다. 설치하면 Visual Studio의 Tools 메뉴에 “Attach to IIS Process…”라는 메뉴 항목이 추가됩니다.&lt;/p&gt;
&lt;p&gt;Happy debugging!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://kenial.gallerycdn.vsassets.io/extensions/kenial/attachtoiisprocess/1.0.0/1564373420428/atip.png&quot; alt=&quot;atip.png&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[어떤 사소한 사건에 대한 이야기]]></title><description><![CDATA[좀 더 긴 제목: (회사를 떠나게 된 결정적 계기를 제공한) 어떤 사소한 사건에 대한 이야기. 나는 이 일로 회사를 떠나기로 결정하고 그 결정을 실행으로 옮긴 이후로...]]></description><link>https://blog.kenial.net/posts/rage-against-the-company/</link><guid isPermaLink="false">https://blog.kenial.net/posts/rage-against-the-company/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;p&gt;좀 더 긴 제목: (회사를 떠나게 된 결정적 계기를 제공한) 어떤 사소한 사건에 대한 이야기.&lt;/p&gt;
&lt;p&gt;나는 이 일로 회사를 떠나기로 결정하고 그 결정을 실행으로 옮긴 이후로, 이 에피소드를 머리 속에 떠올릴 때마다 마음 속에 다른 감정이 떠오르곤 한다. 그래서인지 이게 슬픈 이야기인지 화나는 이야기인지 웃긴 이야기인지조차 이제는 분간이 되지 않는다. 주변에 얘기한 적이 없는 것은 아닌데, 어쨌든 유쾌하지도 않고 좀스러운 이야기다보니 이제는 더 이상 꺼내놓지 말아야지 하는 생각이 들었다가도, 한참 잊고 지내다가 다시 문득 이 에피소드가 떠오르면 아아 세상에 다시 이런 일은 있어서는 안 돼(?)하고 생각하게 되는 상황이라, 텍스트로 적어 놓으면 이런 혼란스러운 기분을 좀 가라앉힐 수 있지 않을까 하는 생각에 적어 본다.&lt;/p&gt;
&lt;p&gt;일단 2018년 초로 돌아가서, 당시의 내 상황에 대해 간략하게라도 설명을 해야 할 것 같다. 회사에는 2015년에 합류를 했고, 처음 회사에 합류할 당시 회사에는 나 말고 두 명의 엔지니어가 있었고 (한 명의 엔지니어가 더 있긴 했지만 개발 쪽은 아니었다), 내가 그 회사에 들어간 첫 번째 시니어 엔지니어였다. 만 3년 동안 그 회사에서 근무를 했고, 다양한 일을 했다. 초반에는 iOS, 안드로이드, tvOS 앱에 관여했고, 비디오 컨텐트 파일의 내부 전송 파이프라인을 만드는 작업을 했고, 그 와중에 터져나가는 PHP 사이트를 안정시키며 스케일 업을 하는 작업을 했고, PHP 사이트를 Django로 마이그레이션 했고, 그 외에 기억이 안 나는 사소한 작업들도 많긴 하지만, 기본적으로 엔지니어링 관련된 것이면 대부분 관여를 했다. 비디오 스트리밍 회사였으나 미디어 처리 관련 전문가는 없었고, 업무는 이 사람이 바쁘면 저 사람이 대신하는 식으로 굴러갔다.&lt;/p&gt;
&lt;p&gt; … 말하자면 3년 내내 물이 새는 제방에 팔뚝을 꽂고 버티는 기분이었다. &lt;/p&gt;
&lt;p&gt;그 3년 동안 어디를 가든지 늘 백팩을 들고 다녔고, 백팩에는 늘 랩탑이 있었다. 시스템에 이상이 생기면 어디에서든 시스템을 들여다 봐야 했었다. 어느 날 시스템 대신 나를 들여다보니 번아웃이 되어 있었다. 번아웃이 오기 이전에 이미 회사 내에서 인정받거나 보상을 받는다는 것에 대한 기대는 접은 상태였고, 주변에는 당장 이 회사를 떠나라는 신호만 가득했다. 물론, 단순히 업무량이 많다는 이유만으로 이런 상황이 된 것은 아니었지만, 여튼 그런 상황이었다.&lt;/p&gt;
&lt;p&gt;이제 그 사소한 사건에 대한 설명을 하자면, 회사에서 내게만 제공하는 혜택이 하나 있었는데, 그 혜택은 식대 제공이었다. 위에서 설명한 상황이 이 혜택과 관련이 있는지 없는지는 판단하기 어렵지만, 어쨌든 항상 야근을 하는 건 아니었기 때문에 식대를 모두 비용 처리를 하지는 않았었다. 가급적 점심이든 저녁이든 회사 일을 하는 동안에 밥을 먹을 경우에 식대로 처리를 하곤 했다(예외적으로는, 외부 개발자를 만날 일이 있거나 할 때 밥을 사는 정도). 야근을 하는 동료가 있으면 같이 밥을 먹고 내가 대신 비용 청구를 할 때도 종종 있었다. 나는 술을 먹지 않기 때문에, 이 비용은 그냥 문자 그대로 식대였다. (밥값과 술값의 차이는 굳이 설명하지 않아도 될테니 넘어가자)&lt;/p&gt;
&lt;p&gt;어느 시점에서인가 비용을 줄인답시고 식대 청구를 줄이라는 이야기가 나오고, 다른 직원들에게는 직접적으로 식대 청구 안된다는 공지가 전달되기도 했다. 그나마 나는 시니어 엔지니어라고 봐 주는 모양이었다. 밥 먹을 돈 아껴서 회사 운영이 잘 될지에 대해서는 회의적이었지만, 나도 알아서 식대 청구를 자제했다. 사실 그 때에는 야근할 일이 많이 줄어들기도 했고.&lt;/p&gt;
&lt;p&gt;그러던 어느 날, 시스템에 올린 식대 청구 신청에서 처리가 되지 않은 영수증 몇 장을 발견했다. 거부 사유도 적혀 있지 않았고, 그냥 거부된 것이었다. 이전까지는 그런 일이 없었으므로 뭔가 착오가 있나 해서 환급 처리를 하는 직원에게 물어봤더니, 자기도 이유를 모르고 재무 담당 임원이 시킨대로만 처리한 것이라는 대답이 돌아왔다. 그래서 재무 담당 임원에게 가서 자초지종을 물었더니 회사 근처에서 한 식사가 아니라서 식대 청구를 반려했다는 답이 돌아왔다.&lt;/p&gt;
&lt;p&gt;그랬다. 그 영수증은 휴가를 가서 호텔에 묵었던 날, 장애가 발생해서 호텔방에서 시스템을 점검한 다음 먹었던 늦은 저녁에 대한 영수증이었다.&lt;/p&gt;
&lt;p&gt;지금도 그 당시에 회사에서 내게 합당한 조건을 제시했더라면(물론 그런 일은 일어나지 않았지만) 회사에 좀 더 남아있을 수도 있지 않았을까 하는 생각이 불쑥 들지만, 바로 다음 순간에 내가 무슨 생각을 하는거지, 하고 생각을 고친다. 아직도 잘 모르겠다. 그 임원은 나를 사사로이 회사 일과 관련도 없는 식대를 청구할 사람으로 봤던걸까, 뭔가 맘에 안 들어서 꼬투리를 잡고 싶었던걸까, 아니면 그냥 단순히 왜 회사에서 가깝지도 않은 곳에서 밥을 먹고 식대를 청구했지 싶었던걸까.&lt;/p&gt;
&lt;p&gt;물론 이 사건이 없었더라도 회사를 떠나긴 했을 것이었다. 다만, 이렇게 어디 얘기도 못하며 좀스럽게 괴로워하는 에피소드가 생기진 않았겠지만.&lt;/p&gt;
&lt;p&gt;왜 이런 사소한 일로 이렇게 나는 화가 났고 지금까지도 화를 내고 있을까하고 회사를 떠난 뒤로도 한참을 생각해 보았다. 지금에 와서는 인정 욕구의 발로가 아니었을까 하고 생각하고 있다. 회사에서 인정해주는 말은 그저 립서비스 뿐, 큰 틀에서 엔지니어링에 관련된 결정을 내릴 권한이나 책임이 내게 주어진 적은 없었고, (내가 있었던 지역을 기준으로 하면) 금전적인 보상도 내 커리어 수준의 평균에 미친 적이 없었다. 회사 외적으로는 기술 커뮤니티에 참여할 수도 없는 환경이었다. 회사의 상황을 배제하고 나에 대해, 내가 하는 일에 대해서 말해줄 수 있는 사람이 없었다.&lt;/p&gt;
&lt;p&gt;인정 욕구에 대한 내 나름의 정의는, 내가 무엇인가를 잘 하고 있는가에 대한 확인이다. 나는 성장하고 있는가, 내가 하는 일이 세상에 가치가 있는 일인가. 스스로 자기 자신과 자신의 일을 평가하는 것 만으로는 부족하다. 그렇기에 외부의 창을 통해 평가받기를 원하고, 객관적인 기준에서 주변과 세상이 나에게 어떤 평가를 내리는지 알고 싶어한다. 다시 말하면, 인정해주기를 바란다.&lt;/p&gt;
&lt;p&gt;그리하여 나의 인정 욕구에 대한 회사의 답은 이렇게 진행된 것이다. 권한의 부재. 보상의 부재. 그리고 신뢰의 부재.&lt;/p&gt;
&lt;p&gt;그 영수증 식대 한 장의 반려 처리로, 나는 휴가 가서 회사 돈으로 저녁을 사 먹는 좀스럽고 뻔뻔한 인간이 되었다. 이 사소한 사건을 통해 나는 진심으로 모욕당했다고 느꼈고, 회사가 나를 신뢰하지 않는다는 강한 확신을 얻게 되었으며, 3년 내내 몸에서 떼놓지 않던 랩탑을 휴일에는 집에 두고 다니기 시작했다.&lt;/p&gt;
&lt;p&gt;그 임원도 지금은 회사를 떠났다고 한다. 앞으로 마주칠 일이 있을지 어떨지 모르겠지만, 그때 회사를 떠나게 될 사소하지만 결정적인 계기를 마련해 주셔서 감사하다고 해야 할 것 같다. 그 일이 없었다면 나는 지금까지도 그 당시의 내 처지를 객관적으로 보지 못하고 있었을 테니까.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[SH - 번역 회고]]></title><description><![CDATA[아직 책이 출간된 것은 아니지만, 초벌 번역을 하며 느낀 바를 정리해두면 좋을 것 같아 씀.]]></description><link>https://blog.kenial.net/posts/retro-on-sh-translation/</link><guid isPermaLink="false">https://blog.kenial.net/posts/retro-on-sh-translation/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;p&gt;아직 책이 출간된 것은 아니지만, 초벌 번역을 하며 느낀 바를 정리해두면 좋을 것 같아 적어본다. (2019-07-14 기준)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.notion.so/&quot;&gt;notion.so&lt;/a&gt;을 사용해보려고 시도했으나 좋은 선택은 아니었음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;문서 요소(eg. 표), 레이아웃 등의 기능이 너무 부실함&lt;/li&gt;
&lt;li&gt;이건 협업용 툴이지 문서 작성 도구가 아님을 절실히 느낌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google Docs를 사용해서 번역:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;아쉬운 부분은 있지만 현실적으로는 여전히 강력한 도구인 듯&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;offline mode에서 편집할 일이 많았는데, 브라우저와 모바일 앱 모두 매끄럽게 작동해서 좋았음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;문서에서 텍스트를 추출해 Google Translate에 넣고 돌려서 나온 결과물을 가이드로 사용하려 했으나, 출판물로 쓸 퀄리티는 도저히 나오지 않음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;영어 단어가 무슨 의미인지는 아는데, 그에 대응하는 한글 단어가 떠오르지 않을 때 참고하면 도움이 되었음. (실제로 출판물에 쓸 만한 단어는 아니지만, 번역할 단어를 떠올리는데 도움이 됨)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;한글 스펠링 체크 기능이 있음. 썩 훌륭하지는 않지만 없는 것보다는 낫다&lt;/li&gt;
&lt;li&gt;Suggestion 기능이 있어 편집자와 소통하기 편리. 썩 훌륭하지는 않지만 없는 것보다는 낫다 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;문서 하나에 전체 텍스트를 넣으면 편집하기 곤란해서 각 챕터별로 문서를 생성했는데, 이렇게 해놓으니 merge하는 것도 간단한 일이 아님&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;문서 내에 특정 영역을 설정하고 이 영역 내의 텍스트만 복사해서 합친 문서를 만드는 google app script를 만들 수 있을까 (?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;전체 텍스트를 표에 넣어서 원문 / 번역문 / 참고사항 컬럼으로 나누어 작업하였다. 번역 초기에는 원문을 그때그때 확인할 수 있어서 좋은 방식인 것 같다
예:&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;원문&lt;/td&gt;
&lt;td&gt;번역&lt;/td&gt;
&lt;td&gt;참고&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;…blahblah That’s an apple and an orange. blahblah…&lt;/td&gt;
&lt;td&gt;…나불나불 비교할 걸 비교해라. 나불나불…&lt;/td&gt;
&lt;td&gt;화자의 공격적 늬앙스를 살림&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;팀 단위로, 지속적으로 뭔가를 번역해야 하는 상황에서는 번역도구가 당연히 필수적인데, 개인 단위에서 책 번역을 할 때 생산성을 높일 수 있는 도구는 무엇일까, 어떤 방식이 효율적인가는 여전히 고민이다&lt;/li&gt;
&lt;li&gt;개인 번역 레벨에서는 오히려 tooltip dictionary같은 작은 툴이 생산성에는 더 도움이 되는 것 같다&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[10년 내에 프로그래밍 배우기]]></title><description><![CDATA[피터 노빅의 'Teach Yourself Programming in Ten Years'의 한글 번역.]]></description><link>https://blog.kenial.net/posts/21-days-ko/</link><guid isPermaLink="false">https://blog.kenial.net/posts/21-days-ko/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;p style=&quot;text-align:right&quot;&gt;원글: &lt;a href=&quot;https://norvig.com/21-days.html&quot;&gt;https://norvig.com/21-days.html&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:right&quot;&gt;작성일: 1998~2014&lt;/p&gt;
&lt;p style=&quot;text-align:right&quot;&gt;번역: keniallee at gmail.com&lt;/p&gt;
&lt;p style=&quot;text-align:right&quot;&gt;번역일: 2019-04-23&lt;/p&gt;
&lt;h1 id=&quot;center10년-내에-프로그래밍-배우기center&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#center10%EB%85%84-%EB%82%B4%EC%97%90-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B0%B0%EC%9A%B0%EA%B8%B0center&quot; aria-label=&quot;center10년 내에 프로그래밍 배우기center permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;center&gt;10년 내에 프로그래밍 배우기&lt;/center&gt;&lt;/h1&gt;
&lt;h3 id=&quot;center피터-노빅center&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#center%ED%94%BC%ED%84%B0-%EB%85%B8%EB%B9%85center&quot; aria-label=&quot;center피터 노빅center permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;center&gt;피터 노빅&lt;/center&gt;&lt;/h3&gt;
&lt;h2 id=&quot;뭐가-그리-급한가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AD%90%EA%B0%80-%EA%B7%B8%EB%A6%AC-%EA%B8%89%ED%95%9C%EA%B0%80&quot; aria-label=&quot;뭐가 그리 급한가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;뭐가 그리 급한가?&lt;/h2&gt;
&lt;p&gt;서점에 가 보면 자바 24시간 완성&lt;em&gt;how to Teach Yourself Java in 24 Hours&lt;/em&gt;과 비슷한 제목의, 며칠이나 몇 시간 내에 C, SQL, Ruby, 알고리즘을 공부하기 위한 책을 볼 수 있을 것이다. 아마존에서 [&lt;a href=&quot;https://www.amazon.com/s?i=stripbooks&amp;#x26;rh=p_28%3Ateach+yourself+hours&amp;#x26;s=relevanceexprank&amp;#x26;Adv-Srch-Books-Submit.x=16&amp;#x26;Adv-Srch-Books-Submit.y=5&amp;#x26;field-dateop=After&amp;#x26;field-dateyear=2000&amp;#x26;unfiltered=1&amp;#x26;ref=sr_adv_b&quot;&gt;title: teach, yourself, hours, since: 2000&lt;/a&gt;] 같은 조건으로 검색을 하면 512개의 책이 검색된다. 상위 10권의 책 중 9권이 프로그래밍 서적이다 (나머지 하나는 부기에 관한 책이다). “Teach yourself”를 “learn”으로 바꾸거나 “hours”를 “days”로 바꿔도 검색 결과는 비슷하다.&lt;/p&gt;
&lt;p&gt;우리는 여기에서, 사람들이 프로그래밍에 관심이 많거나 그게 아니라면 프로그래밍이 말도 안 되게 배우기 쉽다는 결론을 얻을 수 있다. Felleisen은 &lt;a href=&quot;https://htdp.org/&quot;&gt;How to Design Programs&lt;/a&gt;이라는 책에서 이러한 경향을 언급하며 “나쁜 프로그래밍은 쉽다. 바보라든 멍청이든 21일이면 배울 수 있다”라고 이야기하고 있다. Abstruse Goose는 이 내용으로 &lt;a href=&quot;https://abstrusegoose.com/249&quot;&gt;만화&lt;/a&gt;를 그리기도 했다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Sams-Teach-Yourself-Hours-5th/dp/0672333317/ref=sr_1_6?s=books&amp;#x26;ie=UTF8&amp;#x26;qid=1412708443&amp;#x26;sr=1-6&amp;#x26;keywords=learn%2Bc%252B%252B%2Bdays&quot;&gt;Teach Yourself C++ in 24 Hours&lt;/a&gt; 같은 책 제목이 과연  무엇을 의미하는지 한 번 생각해 보자:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Teach Yourself: 그럴듯한 몇몇 프로그램을 개발하고 결과물(성공과 실패 모두)에서 교훈을 얻기에 24시간은 너무나 짧은 시간이다. 숙련된 프로그래머와 일해 볼 기회를 갖거나 C++ 환경에서 개발을 하는 것이 어떤지 이해할 시간조차도 없을 것이다. 요약하면, 짧은 시간에 그리 많은 것을 배울 수 없을 것이다. 그러므로 이러한 책은 단지 피상적으로 언어에 친숙해질 수 있게 할 뿐, 깊은 지식을 다루지 않는다. Alexander Pope가 말했듯, 짧은 배움은 위험한 것이다.&lt;/li&gt;
&lt;li&gt;C++: 24시간이면 (다른 프로그래밍 언어를 알고 있다면) C++ 문법 일부를 배울 수 있겠지만, C++ 언어를 다루는 법에 대해 그리 많은 내용을 배울 수는 없을 것이다. 요약하면, Basic 프로그래머가 이런 식으로 학습한다면 C++ 문법을 사용해서 Basic 스타일로 프로그램을 작성하는 법은 익힐 수 있겠지만, C++가 어떤 경우에 적합한지(혹은 적합하지 않은지)는 배울 수 없을 것이다. 그래서 어쩌라는 건가? &lt;a href=&quot;http://www-pu.informatik.uni-tuebingen.de/users/klaeren/epigrams.html&quot;&gt;Alan Perlis&lt;/a&gt;는 “프로그래머의 사고 방식에 영향을 주지 못하는 프로그래밍 언어는 배울 가치가 없다”고 말한 적이 있다. 이런 방식으로 C++ (혹은 가능성이 좀 더 높은 JavaScript나 &lt;a href=&quot;https://processing.org/&quot;&gt;Processing&lt;/a&gt; 같은 언어)를 약간만 공부해야 하는 경우를 한 가지 꼽자면, 이를테면 특정 업무를 수행하기 위해 이미 존재하고 있는 기존 도구와 상호작용하는 코드를 작성해야 하는 상황을 예로 들 수 있다. 하지만 이 경우에는 프로그래밍을 하는 법을 배운게 아니라, 단지 그 업무를 어떻게 수행하는지 배운 것 뿐이다.&lt;/li&gt;
&lt;li&gt;in 24 Hours: 다음 단락에서 살펴보겠지만, 24시간은 충분치 않다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;10년-내에-프로그래밍-배우기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#10%EB%85%84-%EB%82%B4%EC%97%90-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%B0%B0%EC%9A%B0%EA%B8%B0&quot; aria-label=&quot;10년 내에 프로그래밍 배우기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;10년 내에 프로그래밍 배우기&lt;/h2&gt;
&lt;p&gt;일련의 연구자들(&lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/034531509X/&quot;&gt;Bloom (1985)&lt;/a&gt;, &lt;a href=&quot;https://norvig.com/21-days.html#bh&quot;&gt;Bryan &amp;#x26; Harter (1899)&lt;/a&gt;, &lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0805803092&quot;&gt;Hayes (1989)&lt;/a&gt;, &lt;a href=&quot;https://norvig.com/21-days.html#sc&quot;&gt;Simmon &amp;#x26; Chase (1973)&lt;/a&gt;)은 체스, 작곡, 전보, 그림, 피아노 연주, 수영, 테니스, 신경심리학, 위상기하학 등 다양한 영역에서 전문성을 쌓는데 10여년의 시간이 걸린다고 주장했다. 단순히 했던 것을 반복하는 것이 아니라, 현재 자신의 능력을 약간 넘어서는 과제에 도전하고, 노력하고, 그 과정에서의 성과를 분석하며, 실수를 수정하는 것을 반복하고 또 반복하는 것이다. 요는, 의식적인 연습(deliberative practice)을 해야 하는 것이다. 지름길 같은 건 존재하지 않는다. 4살에 음악 신동 소리를 들었던 모차르트조차도 세계적인 수준의 음악을 작곡해내기 시작하는 데에는 13년 넘는 시간이 걸렸다. 다른 분야의 예를 들면, 비틀즈는 갑자기 연달아 히트곡을 내며 음악 씬에 등장하고 1964년에 에드 설리번 쇼에 출연한 듯 싶겠지만, 비틀즈는 1957년부터 리버풀과 함부르크의 작은 클럽을 전전하며 연주를 하면서 차츰 대중에게 알려졌다. 비틀즈에게 첫 번째 성공을 가져다준 음반 Sgt. Peppers는 1967년에 발매되었다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Outliers-Story-Success-Malcolm-Gladwell/dp/0316017922&quot;&gt;Malcolm Gladwell&lt;/a&gt;은 이 개념을 (10년 대신 1만 시간을 제시했지만) 널리 퍼뜨렸다. Henri Cartier-Bresson(1908-2004)은 다른 기준을 제시했다. “사진 1만장을 찍을 때까지는 최악의 결과물을 얻을 것이다.” (그는 디지털 카메라가 등장해서 사진 1만장을 찍는 일이 1주일 안에 가능하리라는 것은 몰랐다) Samuel Johnson (1709-1784)은 “분야를 막론하고 탁월함이란 일생의 노력을 거쳐서만 얻을 수 있는 것이다. 댓가 없이 탁월함을 얻을 수는 없다.” 또한 Chaucer (1340-1400)는 “인생은 짧고, 재주를 익히는 건 오래 걸린다.”며 한탄했다. Hippocrates (c. 400BC)의 “ars longa, vita brevis”라는 격언은 “Ars longa, vita brevis, occasio praeceps, experimentum periculosum, iudicium difficile”에서 온 것으로, 한국어로 옮기면 “인생은 짧고, 재주는 길며, 기회는 순간이며, 경험은 불안하고, 판단은 어렵다.”라는 의미이다. 물론, 정확한 하나의 기준이 있을 수는 없다. 다양한 기술(프로그래밍, 체스, 체커, 악기 연주 등)을 익히고 통달하는데 정확히 똑같은 시간이 소요되리라 가정하는 것은 말도 안 될 뿐더러, 사람에 따라서 학습 시간에도 차이가 있을 수 있다. &lt;a href=&quot;http://www.amazon.com/K.-Anders-Ericsson/e/B000APB8AQ/ref=dp_byline_cont_book_1&quot;&gt;K. Anders Ericsson&lt;/a&gt; 교수는 “분야를 막론하고, 뛰어난 재능을 가진 개인조차도 최고 수준의 기술에 도달하기 위해 많은 시간을 쓴다는 사실에 주목해야 한다. 1만 시간이라는 숫자는 단지, 타고난 재능을 가진 사람들도 최고 수준에 도달하기 위해 몇 년 동안 1주일에 10~20시간이란 시간을 투자해야 한다는 것에 대한 감을 주기 위한 숫자일 뿐이다.”라고 언급했다.&lt;/p&gt;
&lt;h2 id=&quot;그래도-프로그래머가-되고-싶다면&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9E%98%EB%8F%84-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EA%B0%80-%EB%90%98%EA%B3%A0-%EC%8B%B6%EB%8B%A4%EB%A9%B4&quot; aria-label=&quot;그래도 프로그래머가 되고 싶다면 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그래도 프로그래머가 되고 싶다면&lt;/h2&gt;
&lt;p&gt;프로그래밍에서 성공하기 위한 방법을 여기 제시한다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그래밍에 흥미를 가지고, 재미로 이것저것 시도하라. 계속해서 재미를 느낄 수 있어야 10년/1만 시간을 투자할 마음이 생길 것이다.&lt;/li&gt;
&lt;li&gt;프로그램을 작성하라. 가장 좋은 학습 방법은 &lt;a href=&quot;http://www.engines4ed.org/hyperbook/nodes/NODE-120-pg.html&quot;&gt;직접 해보며 배우는 것이다&lt;/a&gt;. 좀 더 구체적으로는 “특정 분야(도메인)에서의 최고 수준의 기량은 장기간의 경험으로 저절로 체득되는 것이 아니다. 다만, 이미 충분한 경험이 있는 개인조차도 개선을 위한 의도적인 노력을 통해 기량의 수준을 높여갈 수 있으며” &lt;a href=&quot;http://www2.umassd.edu/swpi/DesignInCS/expertise.html&quot;&gt;(p. 366)&lt;/a&gt; “효율적인 학습에는 특정 개인에게 맞춰진 적절한 난이도의 과제, 유용한 피드백, 반복, 실수의 교정이 필요하다.” (p. 20-21) 이러한 관점에서 &lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0521357349&quot;&gt;인식의 실제: 일상의 정신, 수학, 문화&lt;/a&gt;라는 책이 참고가 될 것이다.&lt;/li&gt;
&lt;li&gt;다른 프로그래머와 대화하라; 타인의 프로그램 코드를 읽어라. 책을 읽거나 강의를 듣는 것보다 타인의 프로그램을 읽는 것이 더 중요하다.&lt;/li&gt;
&lt;li&gt;원한다면, 대학에 4년(혹은 그 이상을 대학원에)을 투자하라. 학위를 요구하는 직업을 얻거나, 해당 분야에 대한 깊은 이해를 얻는데 도움이 될 것이다. 하지만 학교에 있는 것이 재미가 없다면, 독학이나 일을 통해서도 (상응하는 노력을 들인다면) 비슷한 경험을 할 수 있다. 어쨌든, 혼자 하는 독서만으로는 충분하지 않다. New Hacker’s Dictionary 의 저자인 Eric Raymond는 “컴퓨터 과학 교육은 전문 프로그래머를 양성할 수 없다. 붓과 안료에 대해 공부한다고 전문 화가가 될 수 없는 것과 같다.”이라고 말했다. 내가 고용했던 최고의 프로그래머 중 한 명은 고등학교 졸업장만 갖고 있었다. 그는 여러 &lt;a href=&quot;http://www.xemacs.org/&quot;&gt;훌륭한 소프트웨어&lt;/a&gt;를 만들었고, 자신의 &lt;a href=&quot;http://groups.google.com/groups?q=alt.fan.jwz&amp;#x26;meta=site%253Dgroups&quot;&gt;뉴스그룹&lt;/a&gt;을 갖고 있으며, 자기 소유의 &lt;a href=&quot;http://en.wikipedia.org/wiki/DNA_Lounge&quot;&gt;나이트클럽&lt;/a&gt;을 살 정도로 스톡 옵션으로 돈을 많이 벌었다.&lt;/li&gt;
&lt;li&gt;다른 프로그래머와 함께 프로젝트에 참여해라. 프로젝트에서 가장 뛰어난 프로그래머로서, 가장 떨어지는 프로그래머로서도 참여해보아야 한다. 뛰어난 프로그래머일때에는 프로젝트를 이끄는 능력과 자신의 비전을 통해 타인에게 영감을 주는 능력을 시험해 볼 수 있다. 처지는 프로그래머 입장일 때에는, 대가들이 어떻게 일하는지, 그리고 대가들이 무엇을 싫어하는지 (당신에게 그런 일을 시킬 것이므로) 배우게 될 것이다.&lt;/li&gt;
&lt;li&gt;이미 있는 프로젝트에 참여해라. 다른 사람이 작성한 프로그램을 이해해보라. 원 작성자가 없을 경우, 프로그램을 이해하고 고치는데 무엇이 필요한지를 알아보라. 어떻게 프로그램을 설계해야 나중에 코드를 유지보수하는 사람이 쉽게 유지보수할 수 있을지 생각해 보라.&lt;/li&gt;
&lt;li&gt;최소한 6개의 프로그래밍 언어를 익혀라. 클래스 추상화class abstractions에 중점을 둔 언어 중 하나 (Java, C++ 같은), 함수형 추상화functional abstraction에 중점을 둔 언어 중 하나 (Lisp, ML, Haskell 같은), 문법 추상화syntactic abstraction를 지원하는 언어 중 하나 (Lisp 같은), 선언적 명세declarative specifications를 지원하는 언어 중 하나 (Prolog, C++ 템플릿 같은), 병렬화parallelism에 중점을 둔 언어 중 하나 (Clojure, Go 같은)를 포함시켜라.&lt;/li&gt;
&lt;li&gt;“컴퓨터 과학”이란 단어에 “컴퓨터”가 들어 있음을 기억해라. 명령 하나를 실행하고, 워드(역주: 프로세서에서 기계어 명령어/연산을 통해 레지스터register로 옮길 수 있는 최소의 데이터 단위)를 메모리에서 꺼내오고 (캐시 미스가 났을 때와 그렇지 않을 때 모두), 디스크에서 연속적으로 워드를 읽을 때, 디스크의 헤드를 옮길 때(seek) 시간이 얼마나 걸리는지 기억하라. (&lt;a href=&quot;#%ED%95%B4%EB%8B%B5&quot;&gt;해답&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;언어 표준화 활동에 참여하라. ANSI C++ 위원회도 좋고, 프로젝트의 코딩 스타일 (들여쓰기에 공백 2칸을 사용할지 4칸을 사용할지 같은)을 정의하는 일도 좋다. 이런 활동을 통해 다른 사람들이 프로그래밍 언어의 어떤 점을 좋아하는지, 얼마나 감정적이 되는지 알 수 있을 것이다. 어쩌면, 왜 그렇게 감정적이 되는지에 대한 이유도 약간이나마 이해할 수 있을 것이다.&lt;/li&gt;
&lt;li&gt;언어 표준화 활동에서 최대한 빨리 빠져나오는 방법에 대해 고민하라.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이를 고려해보면, 책을 읽고 독학하는 것만으로 어느 수준까지 도달할 수 있는지에 대한 의문의 여지가 있다. 내 첫 아이가 태어나기 전, 나는 How To  류의 책을 죄다 읽고도 감을 못 잡는 초보자 신세였다. 30개월 후, 두 번째 아이의 출산 즈음이 되었다. 책 내용을 다시 떠올리기 위해 내가 저 책들을 다시 읽었을까? 아니었다. 나는 내 개인적인 경험에 의존하고 있었고, 이 경험이야말로 전문가가 쓴 수천 페이지의 책들보다 더 유용했으며 나에게 확신을 주었다.&lt;/p&gt;
&lt;p&gt;Fred Brooks는 &lt;a href=&quot;http://en.wikipedia.org/wiki/No_Silver_Bullet&quot;&gt;No Silver Bullet&lt;/a&gt; 이라는 에세이에서 훌륭한 소프트웨어 설계자를 찾는 3가지 지침을 설명했다:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;체계적으로 최대한 빠르게 최고 설계자를 확인하라.&lt;/li&gt;
&lt;li&gt;유망한 후보의 경력 개발을 책임지는 경력 멘토를 임명하고, 경력 파일을 관리하라.&lt;/li&gt;
&lt;li&gt;설계자를 양성하는 기회를 제공하여 서로 대화하고 자극이 되도록 하라.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 계획은 훌륭한 설계자가 되기 위한 필수적인 자질을 가진 사람들이 이미 어딘가에 존재하고 있다는 것을 가정하고 있다; 나머지 일은 그러한 필수적인 자질을 가진 사람들을 잘 구슬러 내는 것이다. &lt;a href=&quot;http://www-pu.informatik.uni-tuebingen.de/users/klaeren/epigrams.html&quot;&gt;Alan Perlis&lt;/a&gt;는 이를 좀 더 간명하게 설명했다: “누구든 조각하는 법을 배울 수 있다: 미켈란젤로는 어떻게 조각하면 안되는지를 배워야 했을 것이다. 훌륭한 프로그래머도 마찬가지다.” Perils는 훈련 과정을 초월한 훌륭한 자질을 가진 사람들에 대해서 이야기하는 것이다. 하지만 이러한 자질은 어디에서 오는 것일까? 이러한 자질은 선천적인가? 꾸준히 계발될 수 있는 것인가? Auguste Gusteau (Ratatouille 에 등장하는 요리사)는 “누구나 요리를 할 수 있지만, 두려움 없는 자만이 위대해질 수 있지”라고 말했다. 나는 훌륭한 자질이 의도적 수련에 인생의 많은 시간을 기꺼이 투자하고자 하는 태도에서 온다고 생각한다. 하지만 어쩌면 두려움 없는이야말로 이러한 태도를 잘 요약한 것일 수도 있다. 혹은 Gusteau의 비평가인 Anton Ego의 말대로, “모두가 위대한 예술가가 되는 건 아니지만, 위대한 예술가는 어디에서든 나올 수 있다.”&lt;/p&gt;
&lt;p&gt;그러니 가서 Java/Ruby/Javascript/PHP 책을 사라; 분명 그 책에서 뭔가를 얻을 수 있을 것이다. 하지만 그 정도로 24시간/21일 내에 갑자기 당신의 삶이 바뀌거나, 프로그래머로서의 전문성이 바뀌지는 않을 것이다. 24개월 동안 지속적인 개선을 위해 열심히 노력하는 것은 어떨까? 음, 그렇다면 당신은 성장하기 시작할 것이다…&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;참고&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0&quot; aria-label=&quot;참고 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참고&lt;/h2&gt;
&lt;p&gt;Bloom, Benjamin (ed.) &lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/034531509X&quot;&gt;Developing Talent in Young People&lt;/a&gt;, Ballantine, 1985.&lt;/p&gt;
&lt;p&gt;Brooks, Fred, &lt;a href=&quot;http://www.cs.nott.ac.uk/~pszcah/G51ISS/Documents/NoSilverBullet.html&quot;&gt;No Silver Bullets&lt;/a&gt;, IEEE Computer, vol. 20, no. 4, 1987, p. 10-19.&lt;/p&gt;
&lt;p&gt;Bryan, W.L. &amp;#x26; Harter, N. “Studies on the telegraphic language: The acquisition of a hierarchy of habits. Psychology Review , 1899, 8, 345-375&lt;/p&gt;
&lt;p&gt;Hayes, John R., &lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0805803092&quot;&gt;Complete Problem Solver&lt;/a&gt; Lawrence Erlbaum, 1989.&lt;/p&gt;
&lt;p&gt;Chase, William G. &amp;#x26; Simon, Herbert A. &lt;a href=&quot;http://books.google.com/books?id=dYPSHAAACAAJ&amp;#x26;dq=%2522perception%2Bin%2Bchess%2522%2Bsimon&amp;#x26;ei=z4PyR5iIAZnmtQPbyLyuDQ&quot;&gt;“Perception in Chess”&lt;/a&gt;Cognitive Psychology , 1973, 4, 55-81.&lt;/p&gt;
&lt;p&gt;Lave, Jean, &lt;a href=&quot;http://www.amazon.com/exec/obidos/ASIN/0521357349&quot;&gt;Cognition in Practice: Mind, Mathematics, and Culture in Everyday Life&lt;/a&gt;, Cambridge University Press, 1988.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;해답&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EB%8B%B5&quot; aria-label=&quot;해답 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해답&lt;/h2&gt;
&lt;p&gt;일반 PC에서 다음과 같은 작업을 수행할 때 드는 대략적인 시간:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;!-- --&gt;&lt;/th&gt;
&lt;th&gt;&lt;!-- --&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;명령 수행&lt;/td&gt;
&lt;td&gt;1/1,000,000,000 초 = 1 나노초&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L1 캐시 메모리에서 데이터 가져오기&lt;/td&gt;
&lt;td&gt;0.5 나노초&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;분기 예측 실패branch misprediction&lt;/td&gt;
&lt;td&gt;5 나노초&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L2 캐시 메모리에서 데이터 가져오기&lt;/td&gt;
&lt;td&gt;7 나노초&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mutex 락/언락&lt;/td&gt;
&lt;td&gt;25 나노초&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;주 메모리에서 데이터 가져오기&lt;/td&gt;
&lt;td&gt;100 나노초&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1Gbps 네트워크에 2KB 전송&lt;/td&gt;
&lt;td&gt;20,000 나노초&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;메모리에서 1MB를 순차적으로 읽기&lt;/td&gt;
&lt;td&gt;250,000 나노초&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;디스크 헤드를 옮겨 데이터 읽어오기(seek)&lt;/td&gt;
&lt;td&gt;8,000,000 나노초&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;디스크에서 1MB를 순차적으로 읽기&lt;/td&gt;
&lt;td&gt;20,000,000 나노초&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;미국에서 유럽으로 패킷을 보내고 응답 받기&lt;/td&gt;
&lt;td&gt;150 밀리초 = 150,000,000 나노초&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2 id=&quot;부록-언어-선택&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B6%80%EB%A1%9D-%EC%96%B8%EC%96%B4-%EC%84%A0%ED%83%9D&quot; aria-label=&quot;부록 언어 선택 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;부록: 언어 선택&lt;/h2&gt;
&lt;p&gt;어떤 프로그래밍 언어를 먼저 배워야 하는지에 대한 질문을 받았다. 정답은 없지만, 다음과 같은 점을 고려하자:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;친구를 이용하라. “윈도우, 유닉스, 맥 중 어떤 운영체제를 사용해야 하죠?” 같은 질문을 받았을 때, 나는 보통 “친구가 사용하는 운영체제를 쓰세요”라고 답한다. 친구에게 배움으로써 얻는 이점은 OS나 프로그래밍 언어 사이에 존재하는 고유한 차이점을 상쇄한다. 학습을 계속했을 때, 나중에 활동하게 될 프로그래머 커뮤니티에서 만날 미래의 친구도 염두에 둘 필요가 있다. 선택한 언어가 급속히 성장중인 커뮤니티를 갖고 있는가, 아니면 하락세인 커뮤니티를 갖고 있는가? 정보를 얻을 수 있는 책, 웹 사이트, 온라인 포럼이 있는가? 포럼의 사람들이 마음에 드는가?&lt;/li&gt;
&lt;li&gt;단순화하라. C++, Java 같은 프로그래밍 언어는 코드의 런타임 효율성에 신경을 쓰는 숙련된 프로그래머들이 모인 대규모 팀 개발을 위해 설계된 언어이다. 그 결과, 이들 언어는 그러한 상황에 맞게 설계된 복잡한 구성요소들을 갖고 있다. 프로그램을 배우는 입장에서는 이러한 복잡성이 꼭 필요하지 않다. 신참 프로그래머로써 배우고 기억하기 쉽게 설계된 언어를 배워도 좋다.&lt;/li&gt;
&lt;li&gt;즐겨라. 피아노 연주를 배울 때 어떤 방식을 선호하는가? 일반적인 방법, 건반 하나하나 누르며 각 음을 듣는 대화식interactive 방법, 혹은 곡 하나를 끝마쳤을 때만 그에 해당하는 음을 들을 수 있는 일괄 처리식batch 방법이 있다고 해 보자. 당연하지만, 피아노 학습에는 대화식 방법이 적합하며, 프로그래밍에도 그렇다. 대화식 모드가 있는 언어를 고르고 사용하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이러한 기준을 따르자면, 내가 첫 프로그래밍 언어로 추천하는 언어는 &lt;a href=&quot;http://python.org/&quot;&gt;Python&lt;/a&gt;이나&lt;a href=&quot;http://www.schemers.org/&quot;&gt;Scheme&lt;/a&gt;이다. 대안으로는 Javascript가 있다. 초심자용으로 잘 설계된 언어는 아니지만, &lt;a href=&quot;https://www.khanacademy.org/computing/cs/programming&quot;&gt;Khan Academy’s tutorial&lt;/a&gt; 같은 온라인 튜토리얼이 많이 있기 때문이다. 하지만 각자의 상황에 따라 더 좋은 선택지가 있을 수도 있다. 10세 이하라면 &lt;a href=&quot;http://alice.org/&quot;&gt;Alice&lt;/a&gt;, &lt;a href=&quot;http://www.squeak.org/&quot;&gt;Squeak&lt;/a&gt;, &lt;a href=&quot;https://blockly-demo.appspot.com/static/apps/index.html&quot;&gt;Blockly&lt;/a&gt;를 선호할 수도 있다. (이보다 나이가 많더라도 말이다). 중요한 것은 당신이 언어를 고르고 시작하는 것이다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;부록-책과-기타-학습-리소스들&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B6%80%EB%A1%9D-%EC%B1%85%EA%B3%BC-%EA%B8%B0%ED%83%80-%ED%95%99%EC%8A%B5-%EB%A6%AC%EC%86%8C%EC%8A%A4%EB%93%A4&quot; aria-label=&quot;부록 책과 기타 학습 리소스들 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;부록: 책과 기타 학습 리소스들&lt;/h2&gt;
&lt;p&gt;어떤 책과 웹 페이지를 통해 학습해야 하는지에 대한 질문을 받았다. “혼자 하는 독서만으로는 충분하지 않다”는 점을 기억해야겠지만, 다음과 같은 리소스를 추천할 수 있겠다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scheme: &lt;a href=&quot;http://www.amazon.com/gp/product/0262011530&quot;&gt;Structure and Interpretation of Computer Programs (Abelson &amp;#x26; Sussman)&lt;/a&gt;은 분명 최고의 컴퓨터 과학 입문서일 것이다. 게다가, 이 책은 컴퓨터 과학의 이해의 한 방편으로 프로그래밍을 가르치고 있다. 이 책의 &lt;a href=&quot;http://www.swiss.ai.mit.edu/classes/6.001/abelson-sussman-lectures/&quot;&gt;온라인 비디오 강의&lt;/a&gt;와 &lt;a href=&quot;https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html&quot;&gt;온라인 텍스트&lt;/a&gt;를 참고하라. 이 책은 어려우므로 다른 학습 자료를 참고하는 것이 나을 수도 있다.&lt;/li&gt;
&lt;li&gt;Scheme: &lt;a href=&quot;http://www.amazon.com/gp/product/0262062186&quot;&gt;How to Design Programs (Felleisen et al.)&lt;/a&gt;은 프로그램을 우아하고 기능적인 방식으로 설계하는 방법에 대한 최고의 책 중 하나다.&lt;/li&gt;
&lt;li&gt;Python: &lt;a href=&quot;http://www.amazon.com/gp/product/1887902996&quot;&gt;Python Programming: An Intro to CS (Zelle)&lt;/a&gt;은 좋은 Python 입문서이다.&lt;/li&gt;
&lt;li&gt;Python: &lt;a href=&quot;http://python.org/&quot;&gt;Python.org&lt;/a&gt;에서 온라인 &lt;a href=&quot;http://wiki.python.org/moin/BeginnersGuide&quot;&gt;튜토리얼&lt;/a&gt;을 찾아볼 수 있다.&lt;/li&gt;
&lt;li&gt;Oz: &lt;a href=&quot;http://www.amazon.com/gp/product/0262220695&quot;&gt;Concepts, Techniques, and Models of Computer Programming (Van Roy &amp;#x26; Haridi)&lt;/a&gt; 은 Abelson &amp;#x26; Sussman의 Abelson &amp;#x26; Sussman의 현대적 버전으로 쓰이고 있다. 이 책은 Abelson &amp;#x26; Sussman의 책에 비해 더 넓은 범위의 프로그래밍의 개념들을 다루고 있지만, 읽고 이해하기 좀 더 쉬울 것이다. Oz라는 유명하지 않은 프로그래밍 언어를 사용하고 있으나, 다른 언어를 배우기 위한 기초가 되기에는 충분하다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Whisper, TTS utility]]></title><description><![CDATA[텍스트를 음성으로 읽어주는 윈도우 유틸리티 Whisper입니다.]]></description><link>https://blog.kenial.net/posts/whisper-tts-utility/</link><guid isPermaLink="false">https://blog.kenial.net/posts/whisper-tts-utility/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;p&gt;macOS에는 OS의 기본 기능으로 텍스트를 음성으로 읽어주는 기능이 있는데(참고: &lt;a href=&quot;http://osxdaily.com/2012/09/15/speak-selected-text-with-a-keystroke-in-mac-os-x/&quot;&gt;http://osxdaily.com/2012/09/15/speak-selected-text-with-a-keystroke-in-mac-os-x/&lt;/a&gt;), 이 기능을 유용하게 써먹다가 ‘왜 윈도우에는 이런 기능이 없지?‘하고 10년 전에 (…) 후다닥 만들었던 윈도우 유틸리티입니다. 소스 코드를 어디다가 저장해놨는지 잊어버리고 실행 파일만 예전 블로그에 남아있었는데, 조그만 코드라도 공개해 놓으면 누가 또 재사용을 하겠지 하는 마음에 decompile하고 정리해서 git repo도 공개합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-resp-iframe-wrapper&quot; style=&quot;padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem&quot; &gt; &lt;iframe src=&quot;https://www.youtube.com/embed/q6P4hJxHcII&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen style=&quot; position: absolute; top: 0; left: 0; width: 100%; height: 100%; &quot;&gt;&lt;/iframe&gt; &lt;/div&gt;
&lt;p&gt;텍스트를 드래그해 선택한 상태에서 &lt;code class=&quot;language-text&quot;&gt;Ctrl + `&lt;/code&gt;를 누르면 선택된 텍스트를 읽기 시작하고, &lt;code class=&quot;language-text&quot;&gt;Ctrl + Shift + `&lt;/code&gt;를 누르면 텍스트에서 wav 파일을 생성해 바탕 화면에 저장합니다.&lt;/p&gt;
&lt;p&gt;링크&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kenial/Whisper&quot;&gt;https://github.com/kenial/Whisper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kenial/Whisper/raw/master/download/Whisper.exe&quot;&gt;실행파일 다운로드 링크&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[New Start]]></title><description><![CDATA[블로그를 새로 시작해야겠다는 생각을 하고 이번에는 Github Pages에 사이트를 얹어서 서버 날라갈 일 없는 편안한 블로깅 생활을 해봐야겠다는 생각을 한 것까지는 좋았는데 ...]]></description><link>https://blog.kenial.net/posts/new-start/</link><guid isPermaLink="false">https://blog.kenial.net/posts/new-start/</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;p&gt;블로그를 새로 시작해야겠다는 생각을 하고 이번에는 Github Pages에 사이트를 얹어서 서버 날라갈 일 없는 편안한 블로깅 생활을 해봐야겠다는 생각을 한 것까지는 좋았는데, 어째서인지 모르겠으나 &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt;를 선택하는 바람에 초기 세팅에 애를 먹음. GraphQL로 온갖 데이터 소스를 다 연결할 수 있어요! 라는 개념은 맘에 들지만 간단한 개인 블로그 하나 출판하는데에는 손이 좀 가는거 아닌가 싶기도. 살짝 후회했지만 삽질을 하다보니 다시는 가까워지고 싶지 않은 node도 다시 봐야하고, 여러모로 강제학습의 기회 아닌가 하는 마음으로 첫 페이지를 남겨본다.&lt;/p&gt;
&lt;p&gt;뭐 이렇게 시작했으니 어떻게든 계속하겠지.&lt;/p&gt;</content:encoded></item></channel></rss>